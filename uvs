#! /usr/bin/env python


import os
import sys
import argparse
import getpass
import json

from libuvs import log
from libuvs import uvsmanager
from libuvs import systemdefaults as sdef
from libuvs import version
from libuvs.uvs_errors import *


_REPO_PASS_PROMPT = ">> Enter Repository Passphrase: \n"


def _init_new_repo():
    """ Initialize a new repository right here in cwd. """

    cwd = os.getcwd()

    log.cli("_init_new_repo() called, repo root: " + cwd)

    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if os.path.isfile(shadow_db_file_path):
        print "This directory (" + cwd + ") appears to be a uvs repository already."
        print "Cancelling init to keep this repository."
        print "If you really want to re-init an empty repository here, delete uvs internal folders first."
        print "These should be called: " + sdef.SHADOW_FOLDER_NAME + ", " + sdef.TEMP_DIR_NAME
        sys.exit(1)


    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)


    uvsmanager.init_new_uvs_repo_overwrite(repo_pass=user_pass, repo_root_path=cwd)


def _commit(commit_msg):
    """ make a new snapshot of the repository. """

    assert commit_msg is not None


    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("commit called. repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.

    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)

    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass , repo_root_path=cwd)
    except UVSError as e:
        print e.message
        sys.exit(1)

    # check if working dir is clean
    repo_status = uvsmgr.get_status()

    # TODO: rethink the return value/exception mechanism.

    if repo_status['working_dir_clean']:
        print "Working directory is clean. Nothing to commit."
        sys.exit(1)

    snapid = uvsmgr.take_snapshot(snapshot_msg=commit_msg, author_name="n/a", author_email="n/a")

    # commit is the same thing as snapshot.
    print "commit successfully created. commit id is: \n" + str(snapid)


def _log_all_commits():
    """ Show a list of all commits in this repo. """


    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("_log_all_commits called. repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.

    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)


    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass , repo_root_path=cwd)
    except UVSError as e:
        print e.message
        sys.exit(1)

    # TODO handle the case where there might be 700k commits in the repo (show them 100 at a time or something)
    # right now we just print everything.

    # i am expecting a list of tuples like this;
    # <snapid, commit msg, author name, author email>
    all_snapshots = uvsmgr.list_all_snapshots()


    print ">>> uvs log: found these snapshots:"
    for snapid, msg, name, email in all_snapshots:
        print "commit id: " + str(snapid)
        print "author name: " + str(name) + " email: " + str(email) + " commit msg: " + str(msg) + "\n\n"

def _log_commits():
    """ Show the list of commits, that are reachable from head. """


    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("_log_commits called. repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.

    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)


    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass , repo_root_path=cwd)
    except UVSError as e:
        print e.message
        sys.exit(1)

    # TODO handle the case where there might be 700k commits in the repo (show them 100 at a time or something)
    # right now we just print everything.

    # if operation does not fail, inside result['snapshots'] i am expecting a list of tuples like this;
    # <snapid, commit msg, author name, author email>
    result = uvsmgr.list_reachable_snapshots_from_head()

    if result is None:
        print "log commits reachable from head failed with nil return"
        sys.exit(1)

    if result and ('op_failed' in result) and result['op_failed']:
        print "operation failed"
        if 'op_failed_desc' in result:
            print "cause: " + str(result['op_failed_desc'])

    else:
        print ">>> uvs log: found these snapshots: "

        for snapid, msg, name, email in result['snapshots']:

            print "commit id: " + str(snapid)
            print "author name: " + str(name) + " email: " + str(email) + " commit msg: " + str(msg) + "\n\n"


def _show_status():
    """ Print the status of the repository.
    this includes head, head state, and whether working directory is clean or not.
    """

    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("_show_status called. repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.

    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)

    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass, repo_root_path=cwd)
    except UVSError as e:
        print e.message
        sys.exit(1)

    repo_status = uvsmgr.get_status()

    # repo_status["working_dir_clean"]: True/False    # true if there are no un-committed changes.
    # repo_status["head"]: commit id                  # (snapid) of the repository head, or None if repo empty.
    # repo_status["detached_head"]: True/False        # detached or attached to a branch
    #
    # if  "detached_head" is False: this key, value also present:
    # repo_status["current_branch"]: "branch_name"

    if repo_status['working_dir_clean']:
        print "working directory is clean."
    else:
        print "working directory has un-committed changes."


    if repo_status['head'] is None:
        print "uvs repository appears to be emtpy."
    else:
        if repo_status['detached_head']:
            print "head is in detached state."
            print "head is at commit: " + str(repo_status["head"])
        else:
            print "head is attached to current branch: " + str(repo_status['current_branch'])
            print "head is at commit: " + str(repo_status["head"])


def _checkout(commit_ref):
    """ checkout the snapshot with the given commit reference (which can be commit id or branch name) """

    assert commit_ref is not None

    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("_checkout called. repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.
    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)


    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass, repo_root_path=cwd)
    except UVSError as e:
        print e.message
        sys.exit(1)

    result = None
    try:
        result = uvsmgr.checkout_reference_at_repo_root(snapshot_ref=commit_ref, clear_dest=True)
    except UVSError as e:
        print e.message
        sys.exit(1)

    if result is None:
        print "checkout failed with nil return"
        sys.exit(1)

    if result and ('op_failed' in result) and result['op_failed']:
        print "operation failed"
        if result.has_key('op_failed_desc'):
            print "cause: " + str(result['op_failed_desc'])
    else:
        print "successfully checked out: " + str(commit_ref)
        if result.has_key("detached_head") and result['detached_head']:
            print "head is in detached state."

        if result.has_key("head_attached_to") :
            print "head is attached to: " + str(result['head_attached_to'])


def _branch(new_branch_name):
    """ Create a new branch with the supplied name.
    The new branch will point to whatever head points right now.
    """

    assert new_branch_name is not None

    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("creating new branch: " + str(new_branch_name) + "\nrepo root: " + cwd)

    # if this is a uvs repo uvs db files are here.

    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)

    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass, repo_root_path=cwd)
    except UVSError as e:
        print e.message
        sys.exit(1)

    #
    result = uvsmgr.create_new_branch(new_branch_name=new_branch_name, set_current_branch=False)

    if result is None:
        print "Create new branch failed with nil return"
        sys.exit(1)

    if result and ('op_failed' in result) and result['op_failed']:
        print "operation failed"
        if result.has_key('op_failed_desc'):
            print "cause: " + str(result['op_failed_desc'])
    else:
        print 'successfully created branch: ' + str(new_branch_name)


def _dbg_show_inverted_dag():
    """ Print the history DAG of this repository with parent pointers inverted to kid pointers. """


    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("_dbg_show_inverted_dag() called. repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.
    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)

    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass, repo_root_path=cwd)
    except UVSError as e:
        # these are all valid ways of getting the exception msg:
        # e.message
        # e.args[0]
        # str(e)

        # .message is probably the worst/most deprecated way

        # print e.args[0]
        print str(e)
        sys.exit(1)

    try:
        result = uvsmgr.get_inverted_history_dag()
    except UVSError as e:
        print "operation failed, cause: "
        print str(e)
        sys.exit(1)


    # result['dag_root'] is the snapid of repo root.
    # result['dag_adjacencies'] is a dict of <parent snapid, [list of kid snapids] >
    print '>>>>>>>> Here is the inverted DAG (parent to kid):'
    print 'inverted DAG root:' + str(result['dag_root'])
    print 'inverted DAG adjacencies: '

    print json.dumps(result['dag_adjacencies'], indent=4, sort_keys=True)


def _dbg_show_dag():
    """ Print the history DAG of this repository. """


    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("_dbg_show_dag() called. repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.
    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)

    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass, repo_root_path=cwd)
    except UVSError as e:
        # these are all valid ways of getting the exception msg:
        # e.message
        # e.args[0]
        # str(e)

        # .message is probably the worst/most deprecated way

        # print e.args[0]
        print str(e)
        sys.exit(1)


        #

    try:
        result = uvsmgr.get_history_dag()
    except UVSError as e:
        print "operation failed, cause: "
        print str(e)
        sys.exit(1)

    # result['dag_adjacencies'] is a dict of <snapid, [list of snapids of parents] >
    print '>>>>>>>> Here is the DAG (kid to parent pointers):'
    print 'DAG adjacencies: '

    print json.dumps(result['dag_adjacencies'], indent=4, sort_keys=True)



def _dbg_dump_keys():
    """
    Print the encryption keys produced by the underlying kdf for this repository.
    Dumping keys to terminal is probably a bad idea, and should not be used beyond devel/debug.
    """

    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("_dbg_dump_keys() called. repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.
    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)

    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass, repo_root_path=cwd)
    except UVSError as e:
        # these are all valid ways of getting the exception msg:
        # e.message
        # e.args[0]
        # str(e)

        # .message is probably the worst/most deprecated way

        # print e.args[0]
        print str(e)
        sys.exit(1)

    try:
        result = uvsmgr._crypt_helper.dbg_get_keys_dump()
    except UVSError as e:
        print "operation failed, cause: "
        print repr(e)
        sys.exit(1)


    print ">>>>>>>> Here are this repository's keys: \n"
    print 'key_fernet_hex: ' + str(result['key_fernet_hex'])
    print 'key_fernet_b64: ' + str(result['key_fernet_b64'])

    print ""
    print 'key_sefp_hex:   ' + str(result['key_sefp_hex'])
    print 'key_sefp_b64:   ' + str(result['key_sefp_b64'])



def _finalize_merge(commit_msg):
    """ Finalize an ongoing merge commit. """

    assert commit_msg is not None

    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("_finalize_merge() called. repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.
    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)

    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass, repo_root_path=cwd)
    except UVSError as e:
        # these are all valid ways of getting the exception msg:
        # e.message
        # e.args[0]
        # str(e)

        # .message is probably the worst/most deprecated way

        # print e.args[0]
        print str(e)
        sys.exit(1)


    try:
        result = uvsmgr.finalize_merge(snapshot_msg=commit_msg, author_name="n/a", author_email="n/a")
    except UVSError as e:
        print "operation failed, cause: "
        print str(e)
        sys.exit(1)


    print 'successfully created merge commit.'
    print 'merge commit id: ' + str(result)




def _merge(branch_to_merge_from):


    # the user ran something like:
    # $ uvs merge -n br2
    # this means merge the changes from br2 to current branch

    assert branch_to_merge_from is not None

    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("_merge() called. branch_to_merge_from: " + str(branch_to_merge_from) + " repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.
    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)

    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass, repo_root_path=cwd)
    except UVSError as e:

        # these are all valid ways of getting the exception msg:
        # e.message
        # e.args[0]
        # str(e)

        # .message is probably the worst/most deprecated way

        # print e.args[0]
        print str(e)
        sys.exit(1)


    #


    try:
        result = uvsmgr.merge(mrg_src_branch=branch_to_merge_from)
    except UVSError as e:
        print "operation failed, cause: "
        print str(e)
        sys.exit(1)


    print result['merge_msg']



def _show_all_refs():
    """ Print all branch names found in the repository.
     TODO: add tags support here as well later when libuvs does. """

    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("_show_all_refs() called. repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.

    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)

    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass, repo_root_path=cwd)
    except UVSError as e:

        # these are all valid ways of getting the exception msg:
        # e.message
        # e.args[0]
        # str(e)

        # .message is probably the worst/most deprecated way

        # print e.args[0]
        print str(e)
        sys.exit(1)

    #
    result = None

    try:
        result = uvsmgr.list_all_refs()
    except UVSError as e:
        print "operation failed"
        print "cause: " + str(e)
        sys.exit(1)


    print 'Here are the references in this repository: \n'

    for ref_name, ref_val in result['refs'].items():

        print log.term_light_blue + str(ref_name).ljust(12) + " : " + str(ref_val) + log.term_reset

        # if head is attached (i.e. head is set to master), no commit msg is returned for it, hence the try
        # other branches should have a commit msg.
        try:
            print "commit msg: " + str(result['commit_msgs'][ref_name]) + "\n"
        except:
            pass


def  _detail_commit(commit_id):
    """ Given a commit id, print its details like author, commit msg .... """

    # getcwd has issues with cifs mounted shares and also on ubuntu if a folder is deleted then recreated
    # a shell at that folder can get the expected output from running pwd but python os.getcwd() fails with
    # oserror file does not exist. it might be better to use subprocess pwd instead of cwd at least on unix.
    cwd = os.getcwd()

    log.cli("_detail_commit() called. repo root: " + cwd)

    # if this is a uvs repo uvs db files are here.

    shadow_root_path = os.path.join(cwd, sdef.SHADOW_FOLDER_NAME)
    shadow_db_file_path = os.path.join(shadow_root_path, sdef.SHADOW_DB_FILE_NAME)

    if (not os.path.isdir(shadow_root_path)) or (not os.path.isfile(shadow_db_file_path)):
        print "current working directory does not appear to be a uvs repository."
        sys.exit(1)

    # now ask the user for the passphrase
    user_pass = getpass.getpass(prompt=_REPO_PASS_PROMPT)

    uvsmgr = None

    try:
        uvsmgr = uvsmanager.UVSManager(repo_pass=user_pass, repo_root_path=cwd)
    except UVSError as e:

        # these are all valid ways of getting the exception msg:
        # e.message
        # e.args[0]
        # str(e)

        # .message is probably the worst/most deprecated way

        # print e.args[0]
        print str(e)
        sys.exit(1)


    try:
        result = uvsmgr.get_commit_detail(commit_id)
    except UVSError as e:
        print "operation failed"
        print "cause: " + str(e)
        sys.exit(1)

    print "commit id: " + str(result['commit_id'])
    print "commit msg: " + str(result['msg'])
    print "author_name: " + str(result['author_name'])
    print "author_email: " + str(result['author_email'])



def _parse_cmdline():
    """ Given command line arguments to the program are in the arguments list, parse and process them. """


    desc_msg = 'UVSource - End to End Encrypted Distributed Version Control System -- ver: ' + version.get_version()

    parser = argparse.ArgumentParser(description=desc_msg)

    parser.add_argument("subcmd1", help="what should uvs do",
                        choices=['init', 'status', 'log-all', 'log', 'commit', 'checkout', 'branch',
                                 'merge', 'merge-finalize', 'show-refs', 'detail-commit',
                                 'dbg-show-inv-dag', 'dbg-show-dag', 'dbg-dump-keys'])

    parser.add_argument("-m", "--message", help="commit message")

    # TODO abolish -ref, where its needed read either -c or -n
    # then say one of them is needed at least.
    parser.add_argument("-r", "--ref", help="commit reference, either a commit id or branch name")
    parser.add_argument("-c", "--cid", help="commit id")
    parser.add_argument("-n", "--name", help="branch name.")
    args = parser.parse_args()

    # print type(args) returns  <class 'argparse.Namespace'>
    #log.cliv("argparse args: " + str(args))

    if 'init' == args.subcmd1:
        log.cliv(">>>> init sub command called.")
        _init_new_repo()

    elif 'status' == args.subcmd1:
        log.cliv(">>>> status sub command called.")
        _show_status()

    elif 'log-all' == args.subcmd1:
        log.cliv(">>>> log-all sub command called.")
        _log_all_commits()

    elif 'log' == args.subcmd1:
        log.cliv(">>>> log sub command called.")
        _log_commits()

    elif 'show-refs' == args.subcmd1:
        log.cliv(">>>> show-refs sub command called.")
        _show_all_refs()

    elif 'dbg-show-inv-dag' == args.subcmd1:
        log.cliv(">>>> dbg-show-inv-dag sub command called.")
        _dbg_show_inverted_dag()

    elif 'dbg-show-dag' == args.subcmd1:
        log.cliv(">>>> dbg-show-dag sub command called.")
        _dbg_show_dag()

    elif 'dbg-dump-keys' == args.subcmd1:
        log.cliv(">>>> dbg-dump-keys sub command called.")
        _dbg_dump_keys()

    elif 'commit' == args.subcmd1:
        log.cliv(">>>> commit sub command called.")

        msg = args.message
        if None == msg:
            print "Commit message is required."
            sys.exit(2)

        _commit(commit_msg=msg)

    elif 'merge-finalize' == args.subcmd1:
        log.cliv(">>>> merge-finalize sub command called.")

        msg = args.message
        if None == msg:
            print "Commit message is required."
            sys.exit(2)

        _finalize_merge(commit_msg=msg)

    elif 'checkout' == args.subcmd1:
        log.cliv(">>>> checkout sub command called.")

        # ref is either a branch name or commit id
        commit_ref = args.ref
        if None == commit_ref:
            print "commit reference (-r or --ref) is required. ref is either a branch name or commit id."
            sys.exit(2)

        _checkout(commit_ref=commit_ref)

    elif 'detail-commit' == args.subcmd1:
        log.cliv(">>>> detail-commit sub command called.")

        # cid must be a commit id
        commit_id = args.cid
        if None == commit_id:
            print "commit id (-c or --cid) is required."
            sys.exit(2)

        _detail_commit(commit_id=commit_id)


    elif 'branch' == args.subcmd1:
        log.cliv(">>>> branch sub command called.")

        new_branch_name = args.name
        if None == new_branch_name:
            print "Error: No branch name supplied. please supply a branch name (-n or --name)"
            sys.exit(2)

        _branch(new_branch_name=new_branch_name)

    elif 'merge' == args.subcmd1:
        log.cliv(">>>> merge sub command called.")

        branch_to_merge_from = args.name
        if None == branch_to_merge_from:
            print "Error: No branch name supplied. please supply a branch name (-n or --name) to merge changes from"
            sys.exit(2)

        _merge(branch_to_merge_from=branch_to_merge_from)







if "__main__" == __name__:
    _parse_cmdline()